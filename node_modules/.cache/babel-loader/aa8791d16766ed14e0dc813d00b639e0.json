{"ast":null,"code":"var _jsxFileName = \"/home/admin1/Documents/parct/fabric_pract/src/Component/Fonts/FontFamily/FontsFamily.jsx\";\nimport React, { memo } from \"react\";\nexport default memo(function FontFamily(props) {\n  console.log(\"FontFamily.jsx\");\n  var selectedFontFamily = props.selectedFontFamily,\n      onChangeFontFamily = props.onChangeFontFamily,\n      fonts = props.fonts;\n\n  if (!(onChangeFontFamily && fonts)) {\n    alert(\"fill all details--> onChangeFontFamily && fonts\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, \"fill all details--> onChangeFontFamily && fonts\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"fontFamily\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Font Family : \"), React.createElement(\"select\", {\n    id: \"fontFamily\",\n    name: \"font-family\",\n    value: selectedFontFamily,\n    onChange: onChangeFontFamily,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, fonts.map(function (fontName, ind) {\n    return React.createElement(\"option\", {\n      key: \"\".concat(ind),\n      value: \"\".concat(fontName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"\".concat(fontName));\n  })));\n});","map":{"version":3,"sources":["/home/admin1/Documents/parct/fabric_pract/src/Component/Fonts/FontFamily/FontsFamily.jsx"],"names":["React","memo","FontFamily","props","console","log","selectedFontFamily","onChangeFontFamily","fonts","alert","map","fontName","ind"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AAEA,eAAeA,IAAI,CAAC,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AAD6C,MAGvCC,kBAHuC,GAGWH,KAHX,CAGvCG,kBAHuC;AAAA,MAGnBC,kBAHmB,GAGWJ,KAHX,CAGnBI,kBAHmB;AAAA,MAGCC,KAHD,GAGWL,KAHX,CAGCK,KAHD;;AAI7C,MAAI,EAAED,kBAAkB,IAAIC,KAAxB,CAAJ,EAAoC;AAClCC,IAAAA,KAAK,CAAC,iDAAD,CAAL;AAEA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAAP;AACD;;AACD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AACE,IAAA,EAAE,EAAC,YADL;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,KAAK,EAAEH,kBAHT;AAIE,IAAA,QAAQ,EAAEC,kBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGC,KAAK,CAACE,GAAN,CAAU,UAACC,QAAD,EAAWC,GAAX;AAAA,WACT;AAAQ,MAAA,GAAG,YAAKA,GAAL,CAAX;AAAuB,MAAA,KAAK,YAAKD,QAAL,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiDA,QAAjD,EADS;AAAA,GAAV,CANH,CAFF,CADF;AAeD,CAxBkB,CAAnB","sourcesContent":["import React, { memo } from \"react\";\n\nexport default memo(function FontFamily(props) {\n  console.log(\"FontFamily.jsx\");\n\n  let { selectedFontFamily, onChangeFontFamily, fonts } = props;\n  if (!(onChangeFontFamily && fonts)) {\n    alert(\"fill all details--> onChangeFontFamily && fonts\");\n\n    return <div>fill all details--> onChangeFontFamily && fonts</div>;\n  }\n  return (\n    <div>\n      <label htmlFor=\"fontFamily\">Font Family : </label>\n      <select\n        id=\"fontFamily\"\n        name=\"font-family\"\n        value={selectedFontFamily}\n        onChange={onChangeFontFamily}\n      >\n        {fonts.map((fontName, ind) => (\n          <option key={`${ind}`} value={`${fontName}`}>{`${fontName}`}</option>\n        ))}\n      </select>\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}